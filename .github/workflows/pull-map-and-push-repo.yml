name: pull-map-and-push-repo
run-name: ${{ github.actor }} is trying to pull, map and push ${{ inputs.target_source_repo }}
on:
  workflow_dispatch:
    inputs:
      target_source_repo:
        type: string
        description: 'Repo to copy in.'
        default: 'https://github.com/firebase/flutterfire.git'
        required: true
      git_commit_user_email:
        type: string
        description: 'Commit user email.'
        default: 'firebase-oss-bot@ossbot.computer'
        required: true
      git_commit_user_name:
        type: string
        description: 'Commit user name.'
        default: 'Firebase OSS Robot'
        required: true
      git_commit_message_text:
        type: string
        description: 'Commit Message Text'
        default: 'Pull and push of flutterfire/docs'
        required: true
      copy_mapping_sources:
        type: string
        description: 'Source Directories/Files'
        default: 'flutterfire/docs'
        required: true
      copy_mapping_destinations:
        type: string
        description: 'Destination Directories'
        default: 'docs/flutter'
        required: true
      seconds_between_push_tries:
        type: string
        description: 'How many seconds to sleep between push attempts.'
        default: '2'
        required: true
  workflow_call:
    inputs:
      target_source_repo:
        type: string
        description: 'Repo to copy in.'
        default: 'https://github.com/firebase/flutterfire.git'
        required: true
      git_commit_user_email:
        type: string
        description: 'Commit user email.'
        default: 'firebase-oss-bot@ossbot.computer'
        required: true
      git_commit_user_name:
        type: string
        description: 'Commit user name.'
        default: 'Firebase OSS Robot'
        required: true
      git_commit_message_text:
        type: string
        description: 'Commit Message Text'
        default: 'Pull and push of flutterfire/docs'
        required: true
      copy_mapping_sources:
        type: string
        description: 'Source Directories/Files'
        default: 'flutterfire/docs'
        required: true
      copy_mapping_destinations:
        type: string
        description: 'Destination Directories'
        default: 'docs/flutter'
        required: true
      seconds_between_push_tries:
        type: string
        description: 'How many seconds to sleep between push attempts.'
        default: '2'
        required: true

jobs:
  checkout-pull-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: pull-external
        run: |
          mkdir temp-pull && cd temp-pull &&
          git clone ${{inputs.target_source_repo}} --depth 1 && ls -r
      - name: copy-target-to-new-location
        run: |
          sources_array=(${{inputs.copy_mapping_sources}})
          destinations_array=(${{inputs.copy_mapping_destinations}})
          echo ${#sources_array[@]} ${#destinations_array[@]}
          if [ ${#sources_array[@]} != ${#destinations_array[@]} ]; then
            echo 'sources_array and destinations_array must be the same length. Please fix.'
            exit 1
          fi
          for (( i=0; i<${#sources_array[@]}; i++ ))
          do
            echo A:B ${sources_array[$i]}:${destinations_array[$i]}
            mkdir -p ${destinations_array[$i]}
            # check if its a directoy, if so, do whats listed already, if not then
            if [[ -d "temp-pull/${sources_array[$i]}" ]]
            then
                echo "temp-pull/${sources_array[$i]} is a DIRECTORY."
                cp -rf temp-pull/${sources_array[$i]}/. ${destinations_array[$i]}
            else
                echo "temp-pull/${sources_array[$i]} is a FILE."
                cp -rf temp-pull/${sources_array[$i]} ${destinations_array[$i]}
            fi
          done
      - name: remove-temp-pull
        run: rm -r temp-pull && git status --untracked-files
      - name: git-commit-and-push
        run: |
          if [ -z "$(git status --porcelain)" ]; then 
            echo 'No changes detected. Exiting.'
            exit 0
          fi
          echo 'Changes detected. Attempting to add, commit, pull --rebase and push.'
          git add .
          git config user.email "${{inputs.git_commit_user_email}}"
          git config user.name "${{inputs.git_commit_user_name}}"
          git commit -m '${{inputs.git_commit_message_text}}'
          let retries_remaining=5
          let seconds_between_push_tries=${{inputs.seconds_between_push_tries}}
          while [ $retries_remaining -gt 0 ]
          do
            git pull --rebase
            git status
            set +e # Turns off automatic fail on errored step behaviour.
            git push
            if [ $? -eq 0 ]; then
                echo "Command succeeded"
                retries_remaining=0
            else
              ((retries_remaining=retries_remaining-1))
              echo "Retrying in $seconds_between_push_tries seconds."
              sleep $seconds_between_push_tries
            fi
            set -e
          done
